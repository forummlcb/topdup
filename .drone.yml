---
kind: pipeline
name: staging-backend

trigger:
  branch:
  - staging
  event:
  - push
  - pull_request
  paths:
    include:
    - "modules/web_app/backend/**"
    exclude:
    - ".gitignore"

environment:
  REGISTRY: 221423461835.dkr.ecr.ap-southeast-1.amazonaws.com
  REPO: topdup-prod-backend

steps:
- name: build Backend docker images
  image: plugins/ecr
  pull: if-not-exists
  settings:
    tags: ${DRONE_COMMIT_SHA:0:6}
    access_key:
      from_secret: ciuser_key_id #ciuser is the IAM user in AWS
    secret_key:
      from_secret: ciuser_secret_access_key
    repo: topdup-prod-backend
    registry: ${REGISTRY}
    region: ap-southeast-1
    dockerfile: modules/web_app/backend/Dockerfile
    force_tag: true

- name: render Nomad configurtion for Backend
  image: alpine
  pull: if-not-exists
  environment:
    TAG: ${DRONE_COMMIT_SHA:0:6}
    POOL_HOST:
      from_secret: staging_postgresql_host
    POOL_DB_NAME:
      from_secret: staging_postgresql_dbname
    POOL_USR:
      from_secret: staging_postgresql_user
    POOL_PWD:
      from_secret: staging_postgresql_password
    ML_API_URL: http://traefik.service.consul:8080
    WEB_EMAIL: "topdup.org@gmail.com"
    WEB_EMAIL_PASS:
      from_secret: web_email_password
  commands:
    - apk add gettext
    - cat modules/web_app/backend/nomad.hcl | envsubst > modules/web_app/backend/nomad.rendered.hcl
    - cat modules/web_app/backend/nomad.rendered.hcl
    - echo "backend-${DRONE_REPO_BRANCH} ${DRONE_COMMIT_SHA:0:6}" > backend-version

- name: deploy to Nomad Staging
  image: loq9/drone-nomad
  pull: if-not-exists
  network_mode: host
  settings:
    addr: http://100.64.12.62:4646
    template: modules/web_app/backend/nomad.rendered.hcl
    watch_deployment: true
    token:
      from_secret: nomad_deployer_token

- name: save artifact's commit to S3
  image: plugins/s3
  pull: if-not-exists
  settings:
    bucket: artifact-versioning
    access_key:
      from_secret: ciuser_key_id
    secret_key:
      from_secret: ciuser_secret_access_key
    region: ap-southeast-1
    source: backend-version
    target: staging/
  when:
    status: [success]

- name: sent notification to slack
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_incoming_webhook
    channel: build-notifications
    icon_emoji: :>
    username: DroneCi
    template: >
      {{uppercasefirst build.branch}} - Webapp Backend: 
          Build number {{build.number}} is {{build.status}}
          Triggered by commit number {{truncate build.commit 8}}
          Details at {{build.link}}
  when:
    status: [success, failure]

---
kind: pipeline
name: production-backend

trigger:
  branch:
    - master
  event:
    - push
  paths:
    include:
    - "modules/web_app/backend/**"
    exclude:
    - ".gitignore"

steps:
- name: Get the Staging-Backend artifacts' version
  image: amazon/aws-cli
  pull: if-not-exists
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: ciuser_key_id #ciuser is the IAM user in AWS
    AWS_SECRET_ACCESS_KEY:
      from_secret: ciuser_secret_access_key
    AWS_DEFAULT_REGION: ap-southeast-1
  commands:
    - aws s3api get-object --bucket artifact-versioning --key staging/backend-version backend-version

- name: render nomad.hcl for Backend
  image: alpine
  pull: if-not-exists
  environment:
    POOL_HOST:
      from_secret: prod_postgresql_host
    POOL_DB_NAME:
      from_secret: prod_postgresql_dbname
    POOL_USR:
      from_secret: prod_postgresql_user
    POOL_PWD:
      from_secret: prod_postgresql_password
    ML_API_URL: http://ml-api.service.consul:8000
    WEB_EMAIL: "topdup.org@gmail.com"
    WEB_EMAIL_PASS:
      from_secret: web_email_password
  commands:
    - apk add gettext
    - export VERSION=$(awk '/backend/ {print $2}' backend-version)
    - cat modules/web_app/backend/nomad.prod.hcl | envsubst > modules/web_app/backend/nomad.rendered.hcl
    - cat modules/web_app/backend/nomad.rendered.hcl

- name: deploy to Nomad Production
  image: loq9/drone-nomad
  pull: if-not-exists
  network_mode: host
  settings:
    addr: http://100.65.106.206:4646
    template: modules/web_app/backend/nomad.rendered.hcl
    watch_deployment: true
    token:
      from_secret: prod_nomad_deployer_token

- name: sent notification to slack
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_incoming_webhook
    channel: build-notifications
    icon_emoji: :>
    username: DroneCi
    template: >
      {{uppercasefirst build.branch}} - Webapp Backend: 
          Build number {{build.number}} is {{build.status}}
          Triggered by commit number {{truncate build.commit 8}}
          Details at {{build.link}}
  when:
    status: [success, failure]

---
kind: pipeline
name: staging-ml-api

trigger:
  branch:
  - staging
  event:
  - push
  paths:
    include:
    - "modules/ml_api/**"
    - "modules/ml/**"
    exclude:
    - ".gitignore"

environment:
  REGISTRY: 221423461835.dkr.ecr.ap-southeast-1.amazonaws.com
  REPO: topdup-prod-ml

steps:
- name: build ml-api images
  image: plugins/ecr
  pull: if-not-exists
  settings:
    tags: ${DRONE_COMMIT_SHA:0:6}
    access_key:
      from_secret: ciuser_key_id #ciuser is the IAM user in AWS
    secret_key:
      from_secret: ciuser_secret_access_key
    repo: topdup-prod-ml
    registry: ${REGISTRY}
    region: ap-southeast-1
    dockerfile: modules/ml_api/Dockerfile
    force_tag: true

- name: render nomad.hcl for ml-api
  image: alpine
  pull: if-not-exists
  environment:
    TAG: ${DRONE_COMMIT_SHA:0:6}
    POSTGRES_URI:
      from_secret: staging_postgresql_uri
  commands:
    - apk add gettext
    - cat modules/ml_api/nomad.hcl | envsubst > modules/ml_api/nomad.rendered.hcl
    - cat modules/ml_api/nomad.rendered.hcl
    - echo "ml-api-${DRONE_REPO_BRANCH} ${DRONE_COMMIT_SHA:0:6}" > ml-api-version

- name: deploy to Nomad
  image: loq9/drone-nomad
  pull: if-not-exists
  network_mode: host
  settings:
    addr: http://100.64.12.62:4646
    template: modules/ml_api/nomad.rendered.hcl
    watch_deployment: true
    token:
      from_secret: nomad_deployer_token

- name: save artifact's commit to S3
  image: plugins/s3
  pull: if-not-exists
  settings:
    bucket: artifact-versioning
    access_key:
      from_secret: ciuser_key_id
    secret_key:
      from_secret: ciuser_secret_access_key
    region: ap-southeast-1
    source: ml-api-version
    target: staging/
  when:
    status: [success]

- name: sent notification to slack
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_incoming_webhook
    channel: build-notifications
    icon_emoji: :>
    username: DroneCi
    template: >
      {{uppercasefirst build.branch}} - Ml Api: 
          Build number {{build.number}} is {{build.status}}
          Triggered by commit number {{truncate build.commit 8}}
          Details at {{build.link}}
  when:
    status: [success, failure]

---
kind: pipeline
name: production-ml-api

trigger:
  branch:
  - master
  event:
  - push
  paths:
    include:
    - "modules/ml_api/**"
    - "modules/ml/**"
    exclude:
    - ".gitignore"

environment:
  REGISTRY: 221423461835.dkr.ecr.ap-southeast-1.amazonaws.com
  REPO: topdup-prod-ml

steps:
- name: Get the Staging-Ml-Api artifacts' version
  image: amazon/aws-cli
  pull: if-not-exists
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: ciuser_key_id #ciuser is the IAM user in AWS
    AWS_SECRET_ACCESS_KEY:
      from_secret: ciuser_secret_access_key
    AWS_DEFAULT_REGION: ap-southeast-1
  commands:
    - aws s3api get-object --bucket artifact-versioning --key staging/ml-api-version ml-api-version

- name: render nomad.hcl for Ml-Api
  image: alpine
  pull: if-not-exists
  environment:
    POSTGRES_URI:
      from_secret: prod_postgresql_uri
  commands:
    - apk add gettext
    - export VERSION=$(awk '/ml-api/ {print $2}' ml-api-version)
    - cat modules/ml_api/nomad.prod.hcl | envsubst > modules/ml_api/nomad.rendered.hcl
    - cat modules/ml_api/nomad.rendered.hcl

- name: deploy to Nomad Production
  image: loq9/drone-nomad
  pull: if-not-exists
  network_mode: host
  settings:
    addr: http://100.65.106.206:4646
    template: modules/ml_api/nomad.rendered.hcl
    watch_deployment: true
    token:
      from_secret: prod_nomad_deployer_token

- name: sent notification to slack
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_incoming_webhook
    channel: build-notifications
    icon_emoji: :>
    username: DroneCi
    template: >
      {{uppercasefirst build.branch}} - Ml Api: 
          Build number {{build.number}} is {{build.status}}
          Triggered by commit number {{truncate build.commit 8}}
          Details at {{build.link}}
  when:
    status: [success, failure]

---
kind: pipeline
name: staging-frontend

trigger:
  branch:
  - staging
  event:
  - push
  - pull_request
  paths:
    include:
    - "modules/web_app/frontend/**"
    exclude:
    - ".gitignore"

steps:
- name: build Frontend package
  image: node:15.11.0-alpine
  pull: if-not-exists
  environment:
    REACT_APP_BASE_API_URL: "https://stag.alb.topdup.org"
    REACT_APP_GA_ID:
      from_secret: staging_react_app_ga_id
  commands:
    - apk add gettext
    - cd modules/web_app/frontend/
    - npm install --legacy-peer-deps
    - npm run build

- name: deploy to Cloudfront
  image: drone-cloudfront-s3
  pull: if-not-exists
  settings:
    aws_access_key_id:
      from_secret: ciuser_key_id
    aws_secret_access_key:
      from_secret: ciuser_secret_access_key
    aws_default_region: ap-southeast-1
    dir_to_sync: modules/web_app/frontend/build
    s3_bucket: topdup-staging-frontend
    cloudfront_id: E2VT0WYUZ03J04 #topdup-staging cloudfront Id

- name: sent notification to slack
  image: plugins/slack
  pull: if-not-exists
  settings:
    webhook:
      from_secret: slack_incoming_webhook
    channel: build-notifications
    icon_emoji: :>
    username: DroneCi
    template: >
      {{uppercasefirst build.branch}} - Webapp Frontend:
          Build number {{build.number}} is {{build.status}}
          Triggered by commit number {{truncate build.commit 8}}
          Details at {{build.link}}
  when:
    status: [success, failure]

---
kind: pipeline
name: production-frontend

trigger:
  branch:
  - master
  event:
  - push
  paths:
    include:
    - "modules/web_app/frontend/**"

steps:
- name: build Frontend package
  image: node:15.11.0-alpine
  pull: if-not-exists
  environment:
    REACT_APP_BASE_API_URL: "https://alb.topdup.org"
    REACT_APP_GA_ID:
      from_secret: prod_react_app_ga_id
  commands:
    - apk add gettext
    - cd modules/web_app/frontend/
    - npm install --legacy-peer-deps
    - npm run build

- name: deploy to Cloudfront Topdup
  image: drone-cloudfront-s3
  pull: if-not-exists
  settings:
    aws_access_key_id:
      from_secret: ciuser_key_id
    aws_secret_access_key:
      from_secret: ciuser_secret_access_key
    aws_default_region: ap-southeast-1
    dir_to_sync: modules/web_app/frontend/build
    s3_bucket: topdup-prod-frontend
    cloudfront_id: E3QWNT8KOEN3DH #topdup-prod cloudfront Id

- name: sent notification to slack
  image: plugins/slack
  pull: if-not-exists
  settings:
    webhook:
      from_secret: slack_incoming_webhook
    channel: build-notifications
    icon_emoji: :>
    username: DroneCi
    template: >
      {{uppercasefirst build.branch}} - Webapp Frontend:
          Build number {{build.number}} is {{build.status}}
          Triggered by commit number {{truncate build.commit 8}}
          Details at {{build.link}}
  when:
    status: [success, failure]

# ---
# kind: pipeline
# name: staging-crawler
#
# trigger:
#   branch:
#   - staging
#   event:
#   - pull_request
#   paths:
#     include:
#     - "modules/crawlers/**"
#     exclude:
#     - "modules/crawlers/.gitignore"
#     - "modules/crawlers/.env.example"
#
# steps:
# - name: build Crawler docker images
#   image: node:15.11.0-alpine
#   pull: if-not-exists
#   environment:
#     REACT_APP_BASE_API_URL: "https://stag.alb.topdup.org"
#     REACT_APP_GA_ID:
#       from_secret: staging_react_app_ga_id
#   commands:
#     - apk add gettext
#     - cd modules/web_app/frontend/
#     - npm install --legacy-peer-deps
#     - npm run build
#
# - name: deploy to Cloudfront
#   image: drone-cloudfront-s3
#   pull: if-not-exists
#   settings:
#     aws_access_key_id:
#       from_secret: ciuser_key_id
#     aws_secret_access_key:
#       from_secret: ciuser_secret_access_key
#     aws_default_region: ap-southeast-1
#     dir_to_sync: modules/web_app/frontend/build
#     s3_bucket: topdup-staging-frontend
#     cloudfront_id: E2VT0WYUZ03J04
#
# - name: sent notification to slack
#   image: plugins/slack
#   pull: if-not-exists
#   settings:
#     webhook:
#       from_secret: slack_incoming_webhook
#     channel: build-notifications
#     icon_emoji: :>
#     username: DroneCi
#     template: >
#       {{uppercasefirst build.branch}} - Webapp Frontend:
#           Build number {{build.number}} is {{build.status}}
#           Triggered by commit number {{truncate build.commit 8}}
#           Details at {{build.link}}
#   when:
#     status: [success, failure]
